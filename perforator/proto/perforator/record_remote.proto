syntax = "proto3";

import "perforator/proto/perforator/perforator.proto";

package NPerforator.NRecordRemote;

option go_package = "github.com/yandex/perforator/perforator/proto/perforator";

////////////////////////////////////////////////////////////////////////////////

message NodeProcessTarget {
    string Host = 1;
    uint32 ProcessID = 2;
    // if not set remote agent will lookup in its own pid namespace
    uint64 PidNamespaceInode = 3;
}

message NodeCgroupTarget {
    string Host = 1;
    string CgroupRegexp = 2;
    // TODO: support cgroup namespaces ? 
}

message PodTarget {
    string Pod = 1;
}

message Target {
    oneof Target {
        NodeProcessTarget NodeProcess = 1;
        NodeCgroupTarget NodeCgroup = 2;
        PodTarget Pod = 3;
    }
}

message PerfEventSettings {
    string Type = 1;
    uint64 Frequency = 2;
    uint64 SampleRate = 3;
}

message LibCudaDetector {}

message BinaryDetector {
    oneof Detector {
        LibCudaDetector LibCuda = 1;
    }
}

message BinaryLocation {
    oneof Location {
        // Path to the binary
        string Path = 1;

        // Detector which will be used to find the binary
        BinaryDetector Detector = 2;
    }
}

// This specifies location within ELF file.
// Under the hood all of these variants will be converted to file offset
message ELFFileLocation {
    oneof Location {
        string Symbol = 1;
        uint64 VirtualAddress = 2;
        uint64 FileOffset = 3;
    }
}

message ELFUprobeTarget {
    ELFFileLocation ELFFileLocation = 1;
    uint64 Offset = 2;
}

message UprobeSettings {
    BinaryLocation BinaryLocation = 1;
    repeated ELFUprobeTarget ELFTarget = 2;
}

message EventSettings {
    oneof Settings {
        PerfEventSettings PerfEvent = 1;
        UprobeSettings Uprobe = 2;
    }
}

message Event {
    EventSettings Settings = 1;
}

message CollectStackTimestampsFeature {}

message Feature {
    oneof Feature {
        CollectStackTimestampsFeature CollectStackTimestamps = 11;
    }
}

// Record profile using remote perforator agent
message RecordRemoteProfileRequest {
    // Target to record
    Target Target = 1;

    // Event to record
    Event Event = 2;

    // Features for recording: e.g collect stack timestamps
    repeated Feature Features = 3;

    // Time interval to record
    NPerforator.NProto.TimeInterval TimeInterval = 4;

    // Additional labels to put on profiles
    map<string, string> Labels = 5;
}

message RecordRemoteProfileResponse {}
