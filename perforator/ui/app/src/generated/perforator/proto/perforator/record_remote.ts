// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v4.22.5
// source: perforator/proto/perforator/record_remote.proto

/* eslint-disable */
import { type TimeInterval } from "./perforator";

export interface NodeProcessTarget {
  Host: string;
  ProcessID: number;
  /** if not set remote agent will lookup in its own pid namespace */
  PidNamespaceInode: string;
}

export interface NodeCgroupTarget {
  Host: string;
  /** TODO: support cgroup namespaces ? */
  CgroupRegexp: string;
}

export interface PodTarget {
  Pod: string;
}

export interface Target {
  NodeProcess?: NodeProcessTarget | undefined;
  NodeCgroup?: NodeCgroupTarget | undefined;
  Pod?: PodTarget | undefined;
}

export interface PerfEventSettings {
  Type: string;
  Frequency: string;
  SampleRate: string;
}

export interface LibCudaDetector {
}

export interface BinaryDetector {
  LibCuda?: LibCudaDetector | undefined;
}

export interface BinaryLocation {
  /** Path to the binary */
  Path?:
    | string
    | undefined;
  /** Detector which will be used to find the binary */
  Detector?: BinaryDetector | undefined;
}

/**
 * This specifies location within ELF file.
 * Under the hood all of these variants will be converted to file offset
 */
export interface ELFFileLocation {
  Symbol?: string | undefined;
  VirtualAddress?: string | undefined;
  FileOffset?: string | undefined;
}

export interface ELFUprobeTarget {
  ELFFileLocation: ELFFileLocation | undefined;
  Offset: string;
}

export interface UprobeSettings {
  BinaryLocation: BinaryLocation | undefined;
  ELFTarget: ELFUprobeTarget[];
}

export interface EventSettings {
  PerfEvent?: PerfEventSettings | undefined;
  Uprobe?: UprobeSettings | undefined;
}

export interface Event {
  Settings: EventSettings | undefined;
}

export interface CollectStackTimestampsFeature {
}

export interface Feature {
  CollectStackTimestamps?: CollectStackTimestampsFeature | undefined;
}

/** Record profile using remote perforator agent */
export interface RecordRemoteProfileRequest {
  /** Target to record */
  Target:
    | Target
    | undefined;
  /** Event to record */
  Event:
    | Event
    | undefined;
  /** Features for recording: e.g collect stack timestamps */
  Features: Feature[];
  /** Time interval to record */
  TimeInterval:
    | TimeInterval
    | undefined;
  /** Additional labels to put on profiles */
  Labels: { [key: string]: string };
}

export interface RecordRemoteProfileRequest_LabelsEntry {
  key: string;
  value: string;
}

export interface RecordRemoteProfileResponse {
}
