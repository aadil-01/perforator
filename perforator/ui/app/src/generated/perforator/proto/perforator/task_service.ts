// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v4.22.5
// source: perforator/proto/perforator/task_service.proto

/* eslint-disable */
import {
  type DiffProfilesRequest,
  type DiffProfilesResponse,
  type GeneratePGOProfileRequest,
  type GeneratePGOProfileResponse,
  type MergeProfilesRequest,
  type MergeProfilesResponse,
  type Paginated,
} from "./perforator";

export enum TaskState {
  Unknown = "Unknown",
  Created = "Created",
  Running = "Running",
  Failed = "Failed",
  Finished = "Finished",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export interface StartTaskRequest {
  Spec: TaskSpec | undefined;
  IdempotencyKey: string;
}

export interface StartTaskResponse {
  TaskID: string;
}

export interface GetTaskRequest {
  TaskID: string;
}

export interface GetTaskResponse {
  Spec: TaskSpec | undefined;
  Status: TaskStatus | undefined;
  Result: TaskResult | undefined;
}

export interface ListTasksRequest {
  Query: TaskQuery | undefined;
  Pagination: Paginated | undefined;
}

export interface ListTasksResponse {
  Tasks: Task[];
  TotalCount: string;
}

export interface TaskQuery {
  Author?: string | undefined;
  From?: string | undefined;
  To?: string | undefined;
}

export interface Task {
  Meta: TaskMeta | undefined;
  Spec: TaskSpec | undefined;
  Status: TaskStatus | undefined;
  Result: TaskResult | undefined;
}

export interface TaskMeta {
  ID: string;
  CreationTime: string;
  Author: string;
  IdempotencyKey: string;
}

export interface TaskSpec {
  MergeProfiles?: MergeProfilesRequest | undefined;
  DiffProfiles?: DiffProfilesRequest | undefined;
  GeneratePGOProfile?: GeneratePGOProfileRequest | undefined;
  TraceBaggage: TraceBaggage | undefined;
}

export interface TaskResult {
  MergeProfiles?: MergeProfilesResponse | undefined;
  DiffProfiles?: DiffProfilesResponse | undefined;
  GeneratePGOProfile?: GeneratePGOProfileResponse | undefined;
}

export interface TaskStatus {
  State: TaskState;
  LastPing: string;
  Error: string;
  Attempts: TaskExecution[];
}

export interface TaskExecution {
  Executor: string;
  StartTime: string;
  LastSeenTime: string;
}

export interface TraceBaggage {
  Baggage: { [key: string]: string };
}

export interface TraceBaggage_BaggageEntry {
  key: string;
  value: string;
}

export interface TaskService {
  /** Schedule async (i.e. heavy profiles merging) task. */
  StartTask(request: StartTaskRequest): Promise<StartTaskResponse>;
  /** Get task result. */
  GetTask(request: GetTaskRequest): Promise<GetTaskResponse>;
  /** Get task result. */
  ListTasks(request: ListTasksRequest): Promise<ListTasksResponse>;
}
