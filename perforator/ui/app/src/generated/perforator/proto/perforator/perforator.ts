// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v4.22.5
// source: perforator/proto/perforator/perforator.proto

/* eslint-disable */
import { type Duration } from "../../../google/protobuf/duration";

export enum ListServicesOrderByClause {
  Unspecified = "Unspecified",
  Services = "Services",
  ProfileCount = "ProfileCount",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export interface Paginated {
  Offset: string;
  Limit: string;
}

export interface TimeInterval {
  From: string | undefined;
  To: string | undefined;
}

export interface SortOrder {
  Columns: string[];
  Direction: SortOrder_SortDirection;
}

export enum SortOrder_SortDirection {
  Ascending = "Ascending",
  Descending = "Descending",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export interface ListServicesRequest {
  Paginated: Paginated | undefined;
  Prefix: string;
  Regex?: string | undefined;
  OrderBy?: ListServicesOrderByClause | undefined;
  MaxStaleAge: Duration | undefined;
}

export interface ListServicesResponse {
  Services: ServiceMeta[];
}

export interface ServiceMeta {
  ServiceID: string;
  LastUpdate: string | undefined;
  ProfileCount: string;
}

export interface ListSuggestionsRequest {
  Field: string;
  Regex?: string | undefined;
  Selector?: string | undefined;
  Paginated: Paginated | undefined;
}

export interface ListSuggestionsResponse {
  SuggestSupported: boolean;
  Suggestions: Suggestion[];
}

export interface Suggestion {
  Value: string;
}

export interface ListProfilesRequest {
  Query: ProfileQuery | undefined;
  Paginated: Paginated | undefined;
  OrderBy: SortOrder | undefined;
}

export interface ListProfilesResponse {
  Profiles: ProfileMeta[];
  HasMore: boolean;
}

export interface ProfileMeta {
  /** ID of the profile. May be empty for the new profiles. */
  ProfileID: string;
  /** Profile system. */
  System: string;
  /** Main profile event type. May not be set, if EventTypes is populated. */
  EventType: string;
  /** List of the event types in the profiles. For example, [cpu.cycles wall.seconds] */
  EventTypes: string[];
  /** Cluster of the profiling target. */
  Cluster: string;
  /** Name of the profiled service. */
  Service: string;
  /** Name of the profile workload. */
  PodID: string;
  /** Name of the profiled host. */
  NodeID: string;
  /** Timestamp. Must be set. */
  Timestamp:
    | string
    | undefined;
  /** List of the all binaries that participated in the profile. */
  BuildIDs: string[];
  /** Extra profile annotations. */
  Attributes: { [key: string]: string };
}

export interface ProfileMeta_AttributesEntry {
  key: string;
  value: string;
}

export interface GetProfileRequest {
  ProfileID: string;
  Format: RenderFormat | undefined;
}

export interface GetProfileResponse {
  /** pprof.Profile or flamegraph */
  Profile: Buffer;
  /** Profile metainformation. */
  ProfileMeta: ProfileMeta | undefined;
}

export interface ProfileQuery {
  /** Service name. Optional. */
  Service?:
    | string
    | undefined;
  /** Time interval. Optional. */
  TimeInterval?:
    | TimeInterval
    | undefined;
  /**
   * Selector string.  Example: `{service=perforator.storage-production, build_id~=a}`
   * Time interval can be additionally specified in selector in format `{ts>"now - 1h", ts <= "now - 30m"}`
   * See perforator/pkg/humantime for timestamps formats
   */
  Selector: string;
  /**
   * Merging thousands of profiles is expensive.
   * Set MaxSamples to control sample rate.
   */
  MaxSamples: number;
}

export interface MergeProfilesRequest {
  /** How to render profiles: pprof/flamegraph, raw/symbolized */
  Format:
    | RenderFormat
    | undefined;
  /** Query to select profiles. */
  Query:
    | ProfileQuery
    | undefined;
  /**
   * Merging thousands of profiles is expensive.
   * Set MaxSamples to control sample rate.
   *
   * @deprecated
   */
  MaxSamples: number;
}

export interface MergeProfilesResponse {
  /** Raw profile bytes in the requested format (e.g. raw pprof or flamegraph svg). */
  Profile?:
    | Buffer
    | undefined;
  /** External profile result URL. Fetch it via plain HTTP GET request. */
  ProfileURL?:
    | string
    | undefined;
  /** Info about profiles that participated in the merged profile. */
  ProfileMeta: ProfileMeta[];
  /**
   * Merged profile statistics.
   * Can be used to estimate quality of the profile.
   * See perforator/pkg/profile/quality.
   */
  Statistics: ProfileStatistics | undefined;
}

export interface ProfileStatistics {
  /**
   * Sum of the profile samples values. A profile sample can contain multiple
   * values. For example, CPU profiles produced by Perforator often contain
   * two sample types: "cpu.cycles" & "wall.seconds". For such profiles, the
   * sample_value_sum will have two entries:
   * {"cpu.cycles": sum_of_cpu_cycles, "wall.seconds": sum_of_walltime_seconds}.
   */
  sampleValueSum: { [key: string]: number };
  /**
   * Number of unique sample keys in the profile.
   * Sample key is a unique combination of sample stack and labels.
   * If this value is low, the profile is probably malformed.
   */
  uniqueSampleCount: string;
  /**
   * Number of stack frames in the profile. Average stack depth can be
   * computed as total_frame_count / unique_sample_count.
   */
  totalFrameCount: string;
  /**
   * Number of unmapped frames (frames which were not attributed to a binary).
   * If this value is high, then the profile is probably malformed.
   */
  unmappedFrameCount: string;
  /**
   * Number of unsymbolized frames (frames without source line info).
   * If this value is high, then the profile is probably not readable.
   */
  unsymbolizedFrameCount: string;
  /** Number of different executable binaries in the profile. */
  totalBinaryCount: string;
  /**
   * Number of unavailable binaries in the profile. The binary is unavailable
   * when the Perforator backend was not available to fetch it by build id,
   * so frames from that binary are probably not symbolized.
   * If this value is high, the profile is probably not readable.
   */
  unavailableBinaryCount: string;
}

export interface ProfileStatistics_SampleValueSumEntry {
  key: string;
  value: number;
}

export interface PGOMeta {
  /** Total amount of lbr-profiles accounted by resulting profile. */
  TotalProfiles: string;
  /** Total amount of lbr-stacks accounted by resulting profile. */
  TotalSamples: string;
  /** Total amount of taken branches accounted by resulting profile. */
  TotalBranches: string;
  /** Total amount of suspicious lbr-entries. */
  BogusLbrEntries: string;
  /** TotalBranches / (total size of executable sections of the binary). */
  TakenBranchesToExecutableBytesRatio: number;
  /** Total amount of different branches accounted by resulting profile. */
  BranchCountMapSize: string;
  /** Total amount of different ranges accounted by resulting profile. */
  RangeCountMapSize: string;
  /** Total amount of different addresses accounted by resulting profile. */
  AddressCountMapSize: string;
  /** BuildID, guessed from the samples, for which the resulting profile is generated. */
  GuessedBuildID: string;
}

export interface GeneratePGOProfileRequest {
  /** Service name (podset-id). */
  Service: string;
  /** The format to render aggregated data in (autofdo/bolt). */
  Format: PGOProfileFormat | undefined;
}

export interface GeneratePGOProfileResponse {
  /** Raw sPGO-profile bytes in text format. */
  Profile?:
    | Buffer
    | undefined;
  /** External profile result URL. Fetch it via plain HTTP GET request. */
  ProfileURL?:
    | string
    | undefined;
  /** Some metadata of the resulting profile. */
  PGOMeta: PGOMeta | undefined;
}

/** Empty */
export interface AutoFDOOptions {
}

/** Empty */
export interface BoltOptions {
}

export interface PGOProfileFormat {
  /** Generate a profile for compilation/linking optimizations (with "-fprofile-sample-use" flag) */
  AutoFDO?:
    | AutoFDOOptions
    | undefined;
  /** Generate a profile for post-link optimization with llvm-bolt (with "-pa" flag) */
  Bolt?: BoltOptions | undefined;
}

export interface DiffProfilesRequest {
  /** Diff (new, right) profile selector. */
  DiffQuery:
    | ProfileQuery
    | undefined;
  /** Baseline (old, left) profile selector. */
  BaselineQuery:
    | ProfileQuery
    | undefined;
  /** How to symbolize profiles. */
  SymbolizeOptions:
    | SymbolizeOptions
    | undefined;
  /**
   * How to render profiles.
   * @deprecated
   *
   * @deprecated
   */
  FlamegraphOptions: FlamegraphOptions | undefined;
  RenderFormat: RenderFormat | undefined;
}

export interface DiffProfilesResponse {
  /** Raw profile bytes in the requested format (e.g. raw pprof or flamegraph svg). */
  Profile?:
    | Buffer
    | undefined;
  /** External profile result URL. Fetch it via plain HTTP GET request. */
  ProfileURL?:
    | string
    | undefined;
  /** ID of the merge task of the diff profile. */
  DiffTaskID: string;
  /** ID of the merge task of the baseline profile. */
  BaselineTaskID: string;
  /** Info about diff profiles that participated in the merged profile. */
  DiffProfileMeta: ProfileMeta[];
  /** Info about baseline profiles that participated in the merged profile. */
  BaselineProfileMeta: ProfileMeta[];
}

export interface UploadProfileRequest {
  /** Serialized profile. */
  Profile: Buffer;
  /**
   * Profile metainformation.
   * Note that ProfileMeta.ProfileID is meaningless.
   */
  ProfileMeta: ProfileMeta | undefined;
}

export interface UploadProfileResponse {
  /** ID of the uploaded profile. */
  ProfileID: string;
}

export interface SymbolizeOptions {
  /**
   * Convert raw instruction addresses to the function names & other metadata.
   * Super slow.
   * Enabled by default.
   */
  Symbolize?:
    | boolean
    | undefined;
  /**
   * Convert raw function names to human-readable form.
   * Enabled by default.
   */
  Demangle?:
    | boolean
    | undefined;
  /**
   * Decode inlined functions.
   * Enabled by default.
   */
  Inlines?:
    | boolean
    | undefined;
  /**
   * Embed dwarf discriminator numbers into high 32 bits of the line numbers.
   * We do not control pprof.Profile format, so we cannot add discriminator field.
   */
  EmbedDwarfDiscriminators?: boolean | undefined;
}

export interface FlamegraphOptions {
  /** Truncate stacks deeper than @MaxDepth. */
  MaxDepth?:
    | number
    | undefined;
  /**
   * Minimum relative function weight to draw.
   * 1.0 means "full flamegraph".
   */
  MinWeight?:
    | number
    | undefined;
  /** Build flamegrph from the top. */
  Inverse?:
    | boolean
    | undefined;
  /** Show line numvers, if available */
  ShowLineNumbers?:
    | boolean
    | undefined;
  /**
   * Show file names after function names.
   * Enabled by default.
   */
  ShowFileNames?:
    | boolean
    | undefined;
  /** How to display raw addresses in the flamegraph. */
  RenderAddresses?: FlamegraphOptions_AddressRenderPolicy | undefined;
}

/**
 * NB: This enum should match the same enumeration in the
 * perforator/pkg/profile/flamegraph/render package.
 */
export enum FlamegraphOptions_AddressRenderPolicy {
  /**
   * RenderAddressesNever - Do not display raw addreses. Unsymolized functions will be rendered
   * as something like <unsymbolized function>.
   * This mode is recommended by default.
   */
  RenderAddressesNever = "RenderAddressesNever",
  /**
   * RenderAddressesUnsymbolized - Display raw addresses for unsymbolized functions only.
   * This can be useful for debugging missing symbols.
   */
  RenderAddressesUnsymbolized = "RenderAddressesUnsymbolized",
  /**
   * RenderAddressesAlways - Always display raw addresses, even for properly symbolized code.
   * This can be useful for debugging symbolization.
   */
  RenderAddressesAlways = "RenderAddressesAlways",
  UNRECOGNIZED = "UNRECOGNIZED",
}

/** Empty */
export interface RawProfileOptions {
}

/** Empty */
export interface LLVMPGOProfileOptions {
}

export interface PostprocessOptions {
  MergePythonAndNativeStacks?: boolean | undefined;
}

export interface RenderFormat {
  /** How to symbolize the profile. */
  Symbolize: SymbolizeOptions | undefined;
  Postprocessing:
    | PostprocessOptions
    | undefined;
  /** Build flamegraph. */
  Flamegraph?:
    | FlamegraphOptions
    | undefined;
  /** Return raw profile, potentiatlly symbolized. */
  RawProfile?:
    | RawProfileOptions
    | undefined;
  /**
   * Return profile suitable for the LLVM PGO.
   * See https://clang.llvm.org/docs/UsersManual.html#sample-profile-text-format.
   * @deprecated
   *
   * @deprecated
   */
  LLVMPGOProfile?:
    | LLVMPGOProfileOptions
    | undefined;
  /**
   * Build flamegraph.
   * Json is parsed faster in the ui.
   * html can be shown without ui.
   */
  JSONFlamegraph?: FlamegraphOptions | undefined;
}

export interface Perforator {
  /** Select services matching filter. */
  ListServices(request: ListServicesRequest): Promise<ListServicesResponse>;
  /** Show options for autocomplete. */
  ListSuggestions(request: ListSuggestionsRequest): Promise<ListSuggestionsResponse>;
  /** Select profiles matching filter. */
  ListProfiles(request: ListProfilesRequest): Promise<ListProfilesResponse>;
  /** Get single profile. */
  GetProfile(request: GetProfileRequest): Promise<GetProfileResponse>;
  /** Build aggregated profile. */
  MergeProfiles(request: MergeProfilesRequest): Promise<MergeProfilesResponse>;
  UploadProfile(request: UploadProfileRequest): Promise<UploadProfileResponse>;
}
