#pragma once

#include <bpf/types.h>
#include <bpf/bpf.h>

////////////////////////////////////////////////////////////////////////////////

enum metric : u32 {
    METRIC_SAMPLE_COUNT,
    METRIC_SAMPLE_SUCCESSFULL_COUNT,
    METRIC_SAMPLE_UNSUCCESSFULL_COUNT,
    METRIC_EVENT_COUNT,
    METRIC_PERFEVENT_MULTIPLEXED_COUNT,
    METRIC_SIGNALDELIVER_TRIGGERED_COUNT,
    METRIC_SIGNALDELIVER_SAMPLED_COUNT,
    METRIC_STACK_FRAME_DWARF_COUNT,
    METRIC_STACK_FRAME_FP_COUNT,
    METRIC_STACK_FRAME_COUNT,
    METRIC_PROCESS_UNKNOWN_COUNT,
    METRIC_PROCESS_NOTIFIED_COUNT,
    METRIC_FILTERED_KTHREAD_COUNT,
    METRIC_FILTERED_PROCESS_COUNT,
    METRIC_ERROR_STAGE_START_COUNT,
    METRIC_ERROR_STAGE_LOCATETRACEEE_COUNT,
    METRIC_ERROR_STAGE_COLLECTSTACK_COUNT,
    METRIC_ERROR_STAGE_TLS_COUNT,
    METRIC_ERROR_STAGE_COLLECT_PYTHON_STACK_COUNT,
    METRIC_PYTHON_READ_TLS_THREAD_STATE_ERROR_COUNT,
    METRIC_PYTHON_TLS_THREAD_STATE_NULL,
    METRIC_PYTHON_READ_PYCFRAME_ERROR_COUNT,
    METRIC_PYTHON_PYCFRAME_NULL,
    METRIC_PYTHON_READ_PY_INTERPRETER_FRAME_ERROR_COUNT,
    METRIC_PYTHON_PY_INTERPRETER_FRAME_NULL,
    METRIC_PYTHON_READ_PREVIOUS_FRAME_ERROR,
    METRIC_PYTHON_READ_FRAME_OWNER_ERROR_COUNT,
    METRIC_PYTHON_FAILED_TO_READ_SYMBOL_COUNT,
    METRIC_PYTHON_NON_ASCII_COMPACT_STRINGS_COUNT,
    METRIC_PYTHON_PROCESSED_STACKS_COUNT,
    METRIC_PYTHON_READ_NATIVE_THREAD_ID_ERROR_COUNT,
    METRIC_ERROR_STAGE_RECORDSAMPLE_COUNT,
    METRIC_ERROR_STAGE_LBR_STACK_COUNT,
    METRIC_DWARF_ERROR_TOOMANYFRAMES_COUNT,
    METRIC_DWARF_ERROR_RULEEVALUATIONFAILED_COUNT,
    METRIC_DWARF_ERROR_NORULEFORINSTRUCTION_COUNT,
    METRIC_DWARF_ERROR_MAPPING_LOCATE_COUNT,
    METRIC_DWARF_ERROR_MAPPING_LPMTRIE_MISS_COUNT,
    METRIC_DWARF_ERROR_MAPPING_LPMTRIE_NOMAPPING_COUNT,
    METRIC_DWARF_ERROR_MAPPING_LPMTRIE_MALFORMED_COUNT,
    METRIC_DWARF_ERROR_MAPPING_NOBINARYID_COUNT,
    METRIC_DWRAF_ERROR_MAPPING_NOBINARYROOT_COUNT,
    METRIC_DWARF_ERROR_MAPPING_UNWINDTABLELOOKUP_COUNT,
    METRIC_FP_ERROR_READ_RETURNADDRESS_COUNT,
    METRIC_FP_ERROR_READ_BASEPOINTER_COUNT,
    METRIC_UPROBE_TRIGGERED_COUNT,
    METRIC_COUNT
};

////////////////////////////////////////////////////////////////////////////////

BPF_MAP(metrics, BPF_MAP_TYPE_PERCPU_ARRAY, u32, u64, METRIC_COUNT);

// Make enum metrics available for the userspace.
BTF_EXPORT(enum metric);

////////////////////////////////////////////////////////////////////////////////

static ALWAYS_INLINE void metric_add(enum metric metric, u64 delta) {
    if (!delta) {
        return;
    }

    u64* value = bpf_map_lookup_elem(&metrics, &metric);
    if (!value) {
        return;
    }

    __sync_fetch_and_add(value, delta);
}

static ALWAYS_INLINE void metric_increment(enum metric metric) {
    metric_add(metric, 1);
}

////////////////////////////////////////////////////////////////////////////////
